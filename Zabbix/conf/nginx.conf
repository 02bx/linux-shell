
user  nginx nginx;
worker_processes  auto;
worker_cpu_affinity auto;
error_log /usr/local/nginx/logs/error.log error;
pid        /usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile 65535;
events {
    use epoll;
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    client_header_buffer_size 4k; 
    open_file_cache max=65535 inactive=60s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;
     fastcgi_cache_path /data/cgi/cache  levels=1:2 keys_zone=one:10m inactive=5m max_size=800m;
     fastcgi_cache_key "$scheme$request_method$host$request_uri";            
     fastcgi_cache_use_stale error timeout invalid_header http_500;             
     fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    charset utf-8;
    server_names_hash_bucket_size 128;
    large_client_header_buffers 4 64k;
    client_max_body_size 64m;
    sendfile on;
    tcp_nodelay on;
    fastcgi_connect_timeout 300; 
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k; 
    fastcgi_buffers 4 64k; 
    fastcgi_busy_buffers_size 128k; 
    fastcgi_temp_file_write_size 128k; 
    gzip on;
    gzip_min_length  1k;
    gzip_buffers  4 32k;  
    gzip_http_version  1.1; 
    gzip_comp_level  4;
    gzip_types text/plain application/x-javascript text/css application/xml; 
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
	
     log_format json '{"timestamp":"$time_iso8601",'
                 '"server_addr":"$server_addr",'
                 '"remote_addr":"$remote_addr",'
                 '"body_bytes_sent":$body_bytes_sent,'
                 '"status":"$status",'
                 '"request":"$request",'
                 '"url":"$uri",'
                 '"http_referer":"$http_referer",'
                 '"request_time":$request_time,'
                 '"upstream_response_time":"$upstream_response_time",'
                 '"upstream_addr":"$upstream_addr",'
                 '"upstream_status":"$upstream_status",'
                 '"http_user_agent":"$http_user_agent" }';

     access_log /var/log/nginx/access.log json; 




     
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #tcp_nopush     on;

    #keepalive_timeout  0;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        charset utf-8;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ .*.(php|php5)$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
	    fastcgi_cache  one;
            include        fastcgi.conf;
	    
        }
	 location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires 10d;
        }
	location ~ .*\.(js|css)?$
        {
            expires 1h;
        }
	location /NginxStatus {
            stub_status on;
            access_log on;
            auth_basic "NginxStatus";
            auth_basic_user_file confpasswd;
         }
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
