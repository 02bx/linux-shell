  sed -i "s@^memory_limit.*@memory_limit = 128M@" /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^output_buffering =@output_buffering = On\noutput_buffering =@' /usr/local/php-5.6.38/etc/php.ini
  #sed -i 's@^;cgi.fix_pathinfo.*@cgi.fix_pathinfo=0@'/usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^short_open_tag = Off@short_open_tag = On@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^expose_php = On@expose_php = Off@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^request_order.*@request_order = "CGP"@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^;date.timezone.*@date.timezone = Asia/Shanghai@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^post_max_size.*@post_max_size = 100M@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^upload_max_filesize.*@upload_max_filesize = 50M@' /usr/local/php-5.6.38/etc/php.ini
 # sed -i 's@^max_execution_time.*@max_execution_time = 5@' /usr/local/php-5.6.38/etc/php.ini
  sed -i 's@^disable_functions.*@disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen@' /usr/local/php-5.6.38/etc/php.ini
#  [ -e /usr/sbin/sendmail ] && sed -i 's@^;sendmail_path.*@sendmail_path = /usr/sbin/sendmail -t -i@' /usr/local/php-5.6.38/etc/php.ini
 # sed -i "s@^;curl.cainfo.*@curl.cainfo = ${openssl_install_dir}/cert.pem@" /usr/local/php-5.6.38/etc/php.ini
 # sed -i "s@^;openssl.cafile.*@openssl.cafile = /usr/local/php-5.6.38/cert.pem@" /usr/local/php-5.6.38/etc/php.ini

#memory_limit是设置PHP使用内存时空间，一般设置为内存的四分之一，应该就差不多了.
#short_open_tag的值，开启以后可以使用PHP的段标签：(<? ?>)。
# expose_php = Off  
#我们经常会在一个http头里发现这样的信息：
#X-Powered-By:PHP/5.2.11
#PHP的版本号暴露无疑，攻击者很容易捕获到此信息，要想解决此问题我们只要如下配置
#G，P，C分别代表Get，Post，Cookie，5.3以上的版本request_order默认是设置成GP的，并不包含C，即$_REQUEST默认只包含$_GET和$_POST !! 安全
# post_max_size限制通过POST方法可以接受的信息最大量
#upload_max_filesize  限制PHP处理上传文件的最大值，此值必须小于post_max_size值
#max_execution_time  php.ini 中缺省的最长执行时间是 30 秒，这是由 php.ini 中的 max_execution_time 变量指定，倘若你有一个需要颇多时间才能完成的工作，例如要发送很多电子邮件给大量收件者，或者要进行繁重的数据分析工作，服务器会在 30 秒后强行中止正在执行的程序，如何解决这个问题呢。 


phpinfo() 
功能描述：输出 PHP 环境信息以及相关的模块、WEB 环境等信息。 
危险等级：中 

passthru() 
功能描述：允许执行一个外部程序并回显输出，类似于 exec()。 
危险等级：高 

exec() 
功能描述：允许执行一个外部程序（如 UNIX Shell 或 CMD 命令等）。 
危险等级：高 

system() 
功能描述：允许执行一个外部程序并回显输出，类似于 passthru()。 
危险等级：高 

chroot() 
功能描述：可改变当前 PHP 进程的工作根目录，仅当系统支持 CLI 模式 
PHP 时才能工作，且该函数不适用于 Windows 系统。 
危险等级：高 

scandir() 
功能描述：列出指定路径中的文件和目录。 
危险等级：中 

chgrp() 
功能描述：改变文件或目录所属的用户组。 
危险等级：高 

chown() 
功能描述：改变文件或目录的所有者。 
危险等级：高 

shell_exec() 
功能描述：通过 Shell 执行命令，并将执行结果作为字符串返回。 
危险等级：高 

proc_open() 
功能描述：执行一个命令并打开文件指针用于读取以及写入。 
危险等级：高 

proc_get_status() 
功能描述：获取使用 proc_open() 所打开进程的信息。 
危险等级：高 

error_log() 
功能描述：将错误信息发送到指定位置（文件）。 
安全备注：在某些版本的 PHP 中，可使用 error_log() 绕过 PHP safe mode， 
执行任意命令。 
危险等级：低 

ini_alter() 
功能描述：是 ini_set() 函数的一个别名函数，功能与 ini_set() 相同。 
具体参见 ini_set()。 
危险等级：高 

ini_set() 
功能描述：可用于修改、设置 PHP 环境配置参数。 
危险等级：高 

ini_restore() 
功能描述：可用于恢复 PHP 环境配置参数到其初始值。 
危险等级：高 

dl() 
功能描述：在 PHP 进行运行过程当中（而非启动时）加载一个 PHP 外部模块。 
危险等级：高 

pfsockopen() 
功能描述：建立一个 Internet 或 UNIX 域的 socket 持久连接。 
危险等级：高 

syslog() 
功能描述：可调用 UNIX 系统的系统层 syslog() 函数。 
危险等级：中 

readlink() 
功能描述：返回符号连接指向的目标文件内容。 
危险等级：中 

symlink() 
功能描述：在 UNIX 系统中建立一个符号链接。 
危险等级：高 

popen() 
功能描述：可通过 popen() 的参数传递一条命令，并对 popen() 所打开的文件进行执行。 
危险等级：高 

stream_socket_server() 
功能描述：建立一个 Internet 或 UNIX 服务器连接。 
危险等级：中 

putenv() 
功能描述：用于在 PHP 运行时改变系统字符集环境。在低于 5.2.6 版本的 PHP 中，可利用该函数 
修改系统字符集环境后，利用 sendmail 指令发送特殊参数执行系统 SHELL 命令。 
危险等级：高 

禁用方法如下： 
打开/etc/php.ini文件， 
查找到 disable_functions ，添加需禁用的函数名
