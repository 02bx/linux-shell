  # my.cnf
  cat > /etc/my.cnf << EOF
[client]
port = 3306
socket = /tmp/mysql.sock
default-character-set = utf8mb4  #防止插入表情时出错
[mysql]
default-character-set=utf8mb4
prompt="MySQL [\\d]> "  #\d	默认数据库名字，尚未选定数据库，则是(null)  提示作用    prompt="\u@\h \d>"
no-auto-rehash  #不自动补全   
[mysqld]
port = 3306
socket = /tmp/mysql.sock
basedir = ${mysql_install_dir}
datadir = ${mysql_data_dir}
pid-file = ${mysql_data_dir}/mysql.pid
user = mysql
bind-address = 0.0.0.0
server-id = 1
init-connect = 'SET NAMES utf8mb4' #设定字符集
character-set-server = utf8mb4  #服务器字符集
skip-name-resolve  #不反解  禁用DNS解析
#skip-networking
back_log = 300# back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。back_log值不能超过TCP/IP连接的侦听队列的大小。若超过则无效，查看当前系统的TCP/IP连接的侦听队列的大小命令：cat /proc/sys/net/ipv4/tcp_max_syn_backlog，目前系统为1024。对于Linux系统推荐设置为大于512的整数。
max_connections = 1000  #MySQL服务器的连接数  “Too many connections” !!!!!性能参数  500-2000 都可以
max_connect_errors = 6000# 默认100 建议大点解决ERROR 1129 (00000): Host 'xxx' is blocked because of many connection errors. Unblock with 'mysqladmin flush-hosts'这个错误的方法比较多，不过有些方案都是临时方案。
open_files_limit = 65535#w文件描述符
table_open_cache = 128  #默认是64，一些资料推荐把这个数值设置为（max_connections* 查询同时用到的表数）。我实践中发现，一般设置为max_connections就没问题了（如果还不够，可以继续加大，但不能设置大得离谱，可能会引发其他问题）。即时生效的设置：
max_allowed_packet = 500M  #值设置过小将导致单个记录超过限制后写入数据库失败，且后续记录写入也将失败，为了数据完整性，需要考虑到事务因素。
binlog_cache_size = 1M  #sync_binlog=0 时二进制日志写进内存缓存 这个值有用  一个事务，在没有提交（uncommitted）的时候，产生的日志，记录到Cache中；等到事务提交（committed）需要提交的时候，则把日志持久化到磁盘。 
#max_heap_table_size = 8M负责设置memory/heap表最大容量，不管其他引擎sql产生的临时表，如果内存不够用 不允许写入新的数据，memory/heap表也不会转成磁盘表，会发出告警不允许写入磁盘数据tmp_table_size：执行sql过程中产生的临时表如果执行sql产生临时表，超过tmp_table_size/max_heap_table_size会产生基于磁盘的myisam表
tmp_table_size = 64M默认为16M，可调到64-256最佳，线程独占，太大可能内存不够I/O堵塞如果动态页面要调大点，100M以上，如果网站大部分都是静态内容，一般64M足够。没啥用
read_buffer_size = 2M  是MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。
read_rnd_buffer_size = 8M  是MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。
sort_buffer_size = 8M #为每个需要进行排序的线程分配该大小的一个缓冲区。
影响：增加这值加速ORDER BY或GROUP BY操作。不过该参数对应的分配内存是每连接独占的，如果有100个连接，那么实际分配的总共排序缓冲区大小为100×sort_buffer_size。
join_buffer_size = 8M  #联合查询操作所能使用的缓冲区大小 当然，如果应用中的排序都比较大。内存充足却并发量不是特别大的时候，也可以继续增大sort buffer size的设置。
#最后需要注意的是，每一个线程都会创建自己独立的buffer而不是整个系统共享，所以设置的值过大会造成系统内存不足
#key_buffer_size = 4M key_buffer_size是对MyISAM表性能影响最大的一个参数
thread_cache_size = 8 #快速重用而缓存的线程数 不立即释放资源 放到缓存区 有新的请求就直接用
#query_cache_type = 1 #表示这个mysql版本是否支持查询缓存。时表示关闭，1时表示打开，2表示只要select 中明确指定SQL_CACHE才缓存。
#这个参数的设置有点奇怪，1、如果事先查询缓存是关闭的然而用 set @@global.query_cache_type=1; 会报错
#ERROR 1651 (HY000): Query cache is disabled; restart the server with query_cache_type=1 to enable it
#如果事先是打开着的尝试去闭关它，那么这个关闭也是不完全的，这种情况下查询还是会去尝试查找缓存。
#最好的关闭查询缓存的办法就是把my.cnf 中的query_cache_type=0然后再重启mysql。
#query_cache_size = 8M #用于查询缓存的内存大小。
#query_cache_limit = 2M#表示单个结果集所被允许缓存的最大值。
开了有个大问题 就是大并发的情况 Waiting for query cache lock；全局锁  效率是硬伤。

#ft_min_word_len = 4#只有MyISAM引擎支持全文检索 innodb 默认就是4。没啥用。可以默认。
log_bin = mysql-bin
binlog_format = mixed  #默认是mixed基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。
sync_binlog = 1#安全用1  性能用0  当事务提交后，Mysql仅仅是将binlog_cache中的数据写入Binlog文件，但不执行fsync之类的磁盘 同步指令通知文件系统将缓存刷新到磁盘，而让Filesystem自行决定什么时候来做同步，这个是性能最好的。
expire_logs_days = 7#二进制日志过期的天数 默认是0  0-99  建议7-14
log_error = ${mysql_data_dir}/mysql-error.log 错误日志
slow_query_log = 1 慢查询日志
long_query_time = 1  这句是记录超过1秒的SQL执行语句
slow_query_log_file = ${mysql_data_dir}/mysql-slow.log 慢日志的存放的位置
#performance_schema = 0  默认开启  5.6   PERFORMANCE_SCHEMA，主要用于收集数据库服务器性能参数。并且库里表的存储引擎均为PERFORMANCE_SCHEMA，而用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表
explicit_defaults_for_timestamp = 1  错误日志中出现  --explicit_defaults_for_timestamp server option 在MySQL 5.7版本之前，且在MySQL 5.6.6版本之后（explicit_defaults_for_timestamp参数在MySQL 5.6.6开始加入）的版本中，如果没有设置explicit_defaults_for_timestamp=1的情况下：
#lower_case_table_names = 1
skip-external-locking #避免MySQL的外部锁定，减少出错几率增强稳定性。默认有。
default_storage_engine = InnoDB #默认用InnoDB
innodb_file_per_table = 1 独立表空间 每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个.frm表描述文件，还有一个.ibd文件。 其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下它的存储位置也是在表的位置之中。
innodb_open_files = 500  #限制Innodb能打开的表的数据，默认为300，数据库里的表特别多的情况，可以适当增大为1000。innodb_open_files的大小对InnoDB效率的影响比较小。但是在InnoDBcrash的情况下，innodb_open_files设置过小会影响recovery的效率。所以用InnoDB的时候还是把innodb_open_files放大一些比较合适。
innodb_buffer_pool_size = 64M #Innodb优化首要参数。专用的数据库服务器下需要设置成物理内存的80%大小。不要设置太大，以免因此与操作系统进行分页竞争。注意，在32位系统中，每个进程被限制在2-3.5G，因此不要设置太高。
innodb_write_io_threads = 4 #在Linux平台上就可以根据CPU核数来更改相应的参数值了，默认是4。跟核数相等或小于核数。
innodb_read_io_threads = 4  #在Linux平台上就可以根据CPU核数来更改相应的参数值了，默认是4。跟核数相等或小于核数。
innodb_thread_concurrency = 0# innodb_thread_concurrency默认是0，则表示没有并发线程数限制，所有请求都会直接请求线程执行。注意：当 innodb_thread_concurrency 设置为0时，则innodb_thread_sleep_delay的设置将会被忽略，不起作用。如果数据库没出现性能问题时，使用默认值即可。

大于0
   当innodb_thread_concurrency>0，则表示有 并发数限制，当一个新的请求发起时，会检查当前并发线程数是否达到了 innodb_thread_concurrency的限制值，如果有，则需要sleep一段时间（sleep的设置详见下一部分），然后再再次请求，如果再次请求时，当前并发数还是达到限制值，那么就会进入FIFO队列等待执行。当进入到内核执行时，会得到一个 消费凭证 ticket，则这个线程，在后面的多次进入innodb执行操作是都不需要重复上面的检查步骤，当把次数消费完，那么这个线程就会被驱逐，等待下次再次进入Innodb，再重新分配ticket。

 建议配置（来自官网）
当并发用户线程数量小于64，建议设置innodb_thread_concurrency=0；
如果负载不稳定，时而低，时而高到峰值，建议先设置innodb_thread_concurrency=128，并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，建议设置innodb_thread_concurrency参数为80，以避免影响性能；
如果DB服务器上还允许其他应用，需要限制mysql的线程使用情况，则可以设置可分配给DB的线程数，但是不建议DB上跑其他应用，也不建议这么设置，因为这样可能导致数据库没有对硬件最优使用；
设置过高值，可能会因为系统资源内部争夺导致性能下降；
在大多数情况下，最佳的值是小于并接近虚拟CPU的个数；
定期监控和分析DB，因为随着数据库负载的变化，业务的增加，innodb_thread_concurrency也需要动态的调整。
innodb_purge_threads = 1  >= 5.6.5)的版本中该值默认为1，最大值为32。默认值1表示innodb的purge操作被分离到purge线程中，master thread不再做purge操作。
innodb_flush_log_at_trx_commit = 2  #当设置为0，该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。
当设置为1，该模式是最安全的，但也是最慢的一种方式。在mysqld 服务崩溃或者服务器主机crash的情况下，binary log 只有可能丢失最多一个语句或者一个事务。。
当设置为2，该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。

innodb_log_buffer_size = 2M #InnoDB的写操作，将数据写入到内存中的日志缓存中，由于InnoDB在事务提交前，并不将改变的日志写入到磁盘中，因此在大事务中，可以减轻磁盘I/O的压力。通常情况下，如果不是写入大量的超大二进制数据（a lot of huge blobs），4MB-8MB已经足够了。
innodb_log_file_size = 32M  一般来说，日志文件的全部大小，应该足够容纳服务器一个小时的活动内容。具体依据如下：我经常设置为 64-512MB 别写太大恢复时间长
innodb_log_files_in_group = 2  该参数控制日志文件数。默认值为2。mysql 事务日志文件是循环覆写的。需要注意的是：innodb_log_files_in_group是静态的变量，需要以“干净”的方式更改并重新启动，否则mysql启动不起来。也就是说如果想把原来是2的修改成3，这样的话你需要先关闭mysql服务，把原来的ib_logfile0和ib_logfile1文件删掉，然后启动mysql
#innodb_max_dirty_pages_pct = 90  默认就好  
innodb_lock_wait_timeout = 120#默认是50s Lock wait timeout exceeded; try restarting transaction  可以调大点也可以小点
#bulk_insert_buffer_size = 8M
#myisam_sort_buffer_size = 8M
#myisam_max_sort_file_size = 10G
#myisam_repair_threads = 1
interactive_timeout = 1800  参数含义：服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。
参数默认值：28800秒（8小时）

wait_timeout = 1800参数含义：服务器关闭非交互连接之前等待活动的秒数。
在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。
参数默认值：28800秒（8小时）

如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，可以进行适当的调整小些。
[mysqldump]
quick
max_allowed_packet = 500M #pl ease check if this file is opended in another program  当shutdown时修改还报这个就改了。
#[myisamchk]
#一般都是innodb 不用myisamchk修补
#key_buffer_size = 8M
#sort_buffer_size = 8M
#read_buffer = 4M
#write_buffer = 4M
EOF
